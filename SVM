import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split

class SVM:
    def __init__(self, lr=0.001, reg=0.01, iters=1000):
        self.lr, self.reg, self.iters = lr, reg, iters
        self.w, self.b = None, None

    def fit(self, X, y):
        y = np.where(y <= 0, -1, 1)
        self.w, self.b = np.zeros(X.shape[1]), 0
        
        for _ in range(self.iters):
            for i, x in enumerate(X):
                if y[i] * (x @ self.w - self.b) >= 1:
                    self.w -= self.lr * 2 * self.reg * self.w
                else:
                    self.w -= self.lr * (2 * self.reg * self.w - x * y[i])
                    self.b -= self.lr * y[i]

    def predict(self, X):
        return np.sign(X @ self.w - self.b)

if __name__ == "__main__":
    X, y = datasets.make_blobs(n_samples=50, n_features=2, centers=2, 
                              cluster_std=1.05, random_state=40)
    y = np.where(y == 0, -1, 1)
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)
    
    clf = SVM()
    clf.fit(X_train, y_train)
    acc = np.mean(y_test == clf.predict(X_test))
    
    print(f"SVM accuracy: {acc:.2f}")
